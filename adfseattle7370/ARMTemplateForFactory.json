{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfseattle7370"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kvtdemoadf.vault.azure.net/"
		},
		"Sas_auth_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'Sas_auth'"
		},
		"snow_seattle_ls_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "SEATTLE_DB"
		},
		"snow_seattle_ls_properties_typeProperties_role": {
			"type": "string",
			"defaultValue": "SEATTLE_ROLE"
		},
		"snow_seattle_ls_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "OXUVOYU-AA36505.snowflakecomputing.com"
		},
		"storage_azure_blob_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://stagedemodamg7370.blob.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/seattle_csv_to_parquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CSV_SEATTLE_PARQUET",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "License Issue Date",
											"type": "Date",
											"physicalType": "String"
										},
										"sink": {
											"name": "LicenseIssueDate",
											"type": "Date",
											"isNullable": true
										}
									},
									{
										"source": {
											"name": "License Number",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LicenseNumber",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Animal's Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AnimalsName",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Species",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SpeciesName",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Primary Breed",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PrimaryBreed",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Secondary Breed",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SecondaryBreed",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "ZIP Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ZipCode",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Seattle_csv",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.container",
										"type": "Expression"
									},
									"folder": {
										"value": "@pipeline().parameters.folder",
										"type": "Expression"
									},
									"file": {
										"value": "@concat(\n    pipeline().parameters.file_seattle,\n    '.csv'\n)",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Seattle_parquet",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.container",
										"type": "Expression"
									},
									"folder": {
										"value": "@pipeline().parameters.folder_parquet",
										"type": "Expression"
									},
									"file": {
										"value": "@concat(\n    pipeline().parameters.file_parquet_seattle,\n    '.parquet'\n)",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CSV_GEO_PARQUET",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CSV_SEATTLE_PARQUET",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 2,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "state_fips",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "StateFips",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "state",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "State",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "state_abbr",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "StateAbbr",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "zipcode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ZipCode",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "county",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "County",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "city",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "City",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Seattle_csv",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.container",
										"type": "Expression"
									},
									"folder": {
										"value": "@pipeline().parameters.folder",
										"type": "Expression"
									},
									"file": {
										"value": "@concat(\n    pipeline().parameters.file_geo,\n    '.csv'\n)",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Seattle_parquet",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.container",
										"type": "Expression"
									},
									"folder": {
										"value": "@pipeline().parameters.folder_parquet",
										"type": "Expression"
									},
									"file": {
										"value": "@concat(\n    pipeline().parameters.file_parquet_geo,\n    '.parquet'\n)",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "CSV_GEO_PARQUET",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.tables_names",
								"type": "Expression"
							},
							"batchCount": 2,
							"activities": [
								{
									"name": "LocationStagePipeline",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "LocationStage",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"LocationStage": {
													"container": {
														"value": "@pipeline().parameters.container",
														"type": "Expression"
													},
													"folder": {
														"value": "@pipeline().parameters.folder_parquet",
														"type": "Expression"
													},
													"file": {
														"value": "@concat(\n    item(),\n    '.parquet'\n)",
														"type": "Expression"
													}
												},
												"sink1": {
													"schema_name": {
														"value": "@pipeline().parameters.schema_stage_name",
														"type": "Expression"
													},
													"table_name": {
														"value": "@toUpper(\n    item()\n)",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "LoadLocationDim",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadLocationDim",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceLocationStage": {
										"schema_name": "STAGE",
										"table_name": "GEO"
									},
									"sinkLocationDim": {
										"schema_name": "DW",
										"table_name": "DIM_LOCATION"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "LoadBreedDim",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "LoadLocationDim",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadBreedDim",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceSeattleStage": {
										"schema_name": "STAGE",
										"table_name": "SEATTLE"
									},
									"sinkDimBreed": {
										"schema_name": "DW",
										"table_name": "DIM_BREED"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "LOADFACT",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "LoadBreedDim",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceSeattle": {
										"schema_name": "STAGE",
										"table_name": "SEATTLE"
									},
									"sourceLocationDim": {
										"schema_name": "DW",
										"table_name": "DIM_LOCATION"
									},
									"sourceDimBreed": {
										"schema_name": "DW",
										"table_name": "DIM_BREED"
									},
									"sourceDateDim": {
										"schema_name": "DW",
										"table_name": "DIM_DATE"
									},
									"sink1": {
										"schema_name": "DW",
										"table_name": "FACT_LISCENSE"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"container": {
						"type": "String",
						"defaultValue": "stagedataseattle"
					},
					"folder": {
						"type": "String",
						"defaultValue": "CSV_seattle"
					},
					"file_seattle": {
						"type": "String",
						"defaultValue": "Seattle_Pet_Licenses_20251015"
					},
					"csv_names": {
						"type": "array",
						"defaultValue": [
							"Seattle_Pet_Licenses_20251015",
							"geo-data"
						]
					},
					"file_geo": {
						"type": "string",
						"defaultValue": "geo-data"
					},
					"folder_parquet": {
						"type": "string",
						"defaultValue": "Parquet_seattle"
					},
					"file_parquet_seattle": {
						"type": "string",
						"defaultValue": "SEATTLE"
					},
					"file_parquet_geo": {
						"type": "string",
						"defaultValue": "GEO"
					},
					"tables_names": {
						"type": "array",
						"defaultValue": [
							"GEO",
							"SEATTLE"
						]
					},
					"schema_stage_name": {
						"type": "string",
						"defaultValue": "STAGE"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Seattle_csv')]",
				"[concat(variables('factoryId'), '/datasets/Seattle_parquet')]",
				"[concat(variables('factoryId'), '/dataflows/LoadLocationDim')]",
				"[concat(variables('factoryId'), '/dataflows/LoadBreedDim')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow2')]",
				"[concat(variables('factoryId'), '/dataflows/LocationStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Seattle_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storage_azure_blob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"folder": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storage_azure_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Seattle_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storage_azure_blob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"folder": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storage_azure_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Seattle_snow')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "snow_seattle_ls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/snow_seattle_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sas_auth')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('Sas_auth_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/snow_seattle_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SnowflakeV2",
				"typeProperties": {
					"authenticationType": "Basic",
					"accountIdentifier": "OXUVOYU-AA36505",
					"user": "SEATTLE_USER",
					"database": "[parameters('snow_seattle_ls_properties_typeProperties_database')]",
					"warehouse": "SEATTLE_WH",
					"role": "[parameters('snow_seattle_ls_properties_typeProperties_role')]",
					"host": "[parameters('snow_seattle_ls_properties_typeProperties_host')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "snowseattlecredential"
					}
				},
				"version": "1.1"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/storage_azure_blob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('storage_azure_blob_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadBreedDim')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Seattle_snow",
								"type": "DatasetReference"
							},
							"name": "sourceSeattleStage"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Seattle_snow",
								"type": "DatasetReference"
							},
							"name": "sinkDimBreed"
						}
					],
					"transformations": [
						{
							"name": "surrogateKeyBreed"
						},
						{
							"name": "aggregateColumns"
						},
						{
							"name": "Selectingrelevanatcolumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          LicenseIssueDate as string,",
						"          LicenseNumber as string,",
						"          AnimalsName as string,",
						"          SpeciesName as string,",
						"          PrimaryBreed as string,",
						"          SecondaryBreed as string,",
						"          ZipCode as string,",
						"          CREATED_DT as timestamp,",
						"          CREATED_BY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceSeattleStage",
						"aggregateColumns keyGenerate(output(BREED_KEY as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeyBreed",
						"sourceSeattleStage aggregate(groupBy(SpeciesName,",
						"          PrimaryBreed,",
						"          SecondaryBreed,",
						"          CREATED_BY,",
						"          CREATED_DT),",
						"     COUNT = count(LicenseNumber)) ~> aggregateColumns",
						"surrogateKeyBreed select(mapColumn(",
						"          SpeciesName,",
						"          PrimaryBreed,",
						"          SecondaryBreed,",
						"          CREATED_BY,",
						"          CREATED_DT,",
						"          BREED_KEY",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Selectingrelevanatcolumns",
						"Selectingrelevanatcolumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          SPECIES = SpeciesName,",
						"          PRIMARY_BREED = PrimaryBreed,",
						"          SECONDARY_BREED = SecondaryBreed,",
						"          DI_CREATED_BY = CREATED_BY,",
						"          DI_CREATED_DT = CREATED_DT,",
						"          BREED_KEY",
						"     )) ~> sinkDimBreed"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Seattle_snow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadLocationDim')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Seattle_snow",
								"type": "DatasetReference"
							},
							"name": "SourceLocationStage"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Seattle_snow",
								"type": "DatasetReference"
							},
							"name": "sinkLocationDim"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          StateFips as string,",
						"          State as string,",
						"          StateAbbr as string,",
						"          ZipCode as string,",
						"          County as string,",
						"          City as string,",
						"          CREATED_DT as timestamp,",
						"          CREATED_BY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> SourceLocationStage",
						"SourceLocationStage keyGenerate(output(LOCATION_KEY as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey",
						"surrogateKey alterRow(insertIf(iifNull(ZipCode,'0',ZipCode)=='0')) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          STATE_FIPS = StateFips,",
						"          STATE_NAME = State,",
						"          STATE_CODE = StateAbbr,",
						"          ZIP_CODE = ZipCode,",
						"          COUNTY_NAME = County,",
						"          CITY_NAME = City,",
						"          DI_CREATED_DT = CREATED_DT,",
						"          DI_CREATED_BY = CREATED_BY,",
						"          LOCATION_KEY",
						"     )) ~> sinkLocationDim"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Seattle_snow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LocationStage')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Seattle_parquet",
								"type": "DatasetReference"
							},
							"name": "LocationStage"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Seattle_snow",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> LocationStage",
						"LocationStage derive(CREATED_BY = \"Pipeline\",",
						"          CREATED_DT = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Seattle_parquet')]",
				"[concat(variables('factoryId'), '/datasets/Seattle_snow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Seattle_snow",
								"type": "DatasetReference"
							},
							"name": "sourceSeattle"
						},
						{
							"dataset": {
								"referenceName": "Seattle_snow",
								"type": "DatasetReference"
							},
							"name": "sourceLocationDim"
						},
						{
							"dataset": {
								"referenceName": "Seattle_snow",
								"type": "DatasetReference"
							},
							"name": "sourceDimBreed"
						},
						{
							"dataset": {
								"referenceName": "Seattle_snow",
								"type": "DatasetReference"
							},
							"name": "sourceDateDim"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Seattle_snow",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "joinSeatLoc"
						},
						{
							"name": "joinBreed"
						},
						{
							"name": "join1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          LicenseIssueDate as string,",
						"          LicenseNumber as string,",
						"          AnimalsName as string,",
						"          SpeciesName as string,",
						"          PrimaryBreed as string,",
						"          SecondaryBreed as string,",
						"          ZipCode as string,",
						"          CREATED_DT as timestamp,",
						"          CREATED_BY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceSeattle",
						"source(output(",
						"          LOCATION_KEY as decimal(38,0),",
						"          STATE_FIPS as string,",
						"          ZIP_CODE as string,",
						"          CITY_NAME as string,",
						"          STATE_CODE as string,",
						"          STATE_NAME as string,",
						"          COUNTY_NAME as string,",
						"          DI_CREATED_DT as timestamp,",
						"          DI_CREATED_BY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceLocationDim",
						"source(output(",
						"          BREED_KEY as decimal(38,0),",
						"          SPECIES as string,",
						"          PRIMARY_BREED as string,",
						"          SECONDARY_BREED as string,",
						"          DI_CREATED_DT as timestamp,",
						"          DI_CREATED_BY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceDimBreed",
						"source(output(",
						"          DATE_KEY as decimal(38,0),",
						"          FULL_DATE as date,",
						"          DAY_OF_WEEK as string,",
						"          DAY_OF_MONTH as decimal(38,0),",
						"          WEEK_OF_YEAR as decimal(38,0),",
						"          MONTH_NUMBER as decimal(38,0),",
						"          MONTH_NAME as string,",
						"          MONTH_ABBR as string,",
						"          QUARTER_NUMBER as decimal(38,0),",
						"          QUARTER_NAME as string,",
						"          YEAR as decimal(38,0),",
						"          YEAR_QUARTER as string,",
						"          YEAR_MONTH as string,",
						"          IS_WEEKEND as boolean,",
						"          DI_CREATED_DT as timestamp,",
						"          DI_CREATED_BY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceDateDim",
						"sourceSeattle, sourceLocationDim join(ZipCode == ZIP_CODE,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSeatLoc",
						"joinSeatLoc, sourceDimBreed join(PrimaryBreed == PRIMARY_BREED",
						"     && SecondaryBreed == SECONDARY_BREED",
						"     && SpeciesName == SPECIES,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinBreed",
						"joinBreed, sourceDateDim join(toDate(LicenseIssueDate) == FULL_DATE,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 aggregate(groupBy(BREED_KEY,",
						"          LOCATION_KEY,",
						"          AnimalsName,",
						"          LicenseNumber,",
						"          CREATED_DT,",
						"          CREATED_BY,",
						"          DATE_KEY),",
						"     LicenseIssue = count(LicenseIssueDate)) ~> aggregate1",
						"aggregate1 keyGenerate(output(RowNum as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(LICENSE_FACT_KEY = RowNum) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          BREED_KEY,",
						"          LOCATION_KEY,",
						"          ANIMAL_NAME = AnimalsName,",
						"          LICENSE_NUMBER = LicenseNumber,",
						"          DI_CREATED_DT = CREATED_DT,",
						"          DI_CREATED_BY = CREATED_BY,",
						"          ISSUE_DATE_KEY = DATE_KEY,",
						"          LICENSE_FACT_KEY = RowNum",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Seattle_snow')]"
			]
		}
	]
}