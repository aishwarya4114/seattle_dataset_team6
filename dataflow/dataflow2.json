{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Seattle_snow",
						"type": "DatasetReference"
					},
					"name": "sourceSeattle"
				},
				{
					"dataset": {
						"referenceName": "Seattle_snow",
						"type": "DatasetReference"
					},
					"name": "sourceLocationDim"
				},
				{
					"dataset": {
						"referenceName": "Seattle_snow",
						"type": "DatasetReference"
					},
					"name": "sourceDimBreed"
				},
				{
					"dataset": {
						"referenceName": "Seattle_snow",
						"type": "DatasetReference"
					},
					"name": "sourceDateDim"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Seattle_snow",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "joinSeatLoc"
				},
				{
					"name": "joinBreed"
				},
				{
					"name": "join1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          LicenseIssueDate as string,",
				"          LicenseNumber as string,",
				"          AnimalsName as string,",
				"          SpeciesName as string,",
				"          PrimaryBreed as string,",
				"          SecondaryBreed as string,",
				"          ZipCode as string,",
				"          CREATED_DT as timestamp,",
				"          CREATED_BY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceSeattle",
				"source(output(",
				"          LOCATION_KEY as decimal(38,0),",
				"          STATE_FIPS as string,",
				"          ZIP_CODE as string,",
				"          CITY_NAME as string,",
				"          STATE_CODE as string,",
				"          STATE_NAME as string,",
				"          COUNTY_NAME as string,",
				"          DI_CREATED_DT as timestamp,",
				"          DI_CREATED_BY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceLocationDim",
				"source(output(",
				"          BREED_KEY as decimal(38,0),",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          DI_CREATED_DT as timestamp,",
				"          DI_CREATED_BY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceDimBreed",
				"source(output(",
				"          DATE_KEY as decimal(38,0),",
				"          FULL_DATE as date,",
				"          DAY_OF_WEEK as string,",
				"          DAY_OF_MONTH as decimal(38,0),",
				"          WEEK_OF_YEAR as decimal(38,0),",
				"          MONTH_NUMBER as decimal(38,0),",
				"          MONTH_NAME as string,",
				"          MONTH_ABBR as string,",
				"          QUARTER_NUMBER as decimal(38,0),",
				"          QUARTER_NAME as string,",
				"          YEAR as decimal(38,0),",
				"          YEAR_QUARTER as string,",
				"          YEAR_MONTH as string,",
				"          IS_WEEKEND as boolean,",
				"          DI_CREATED_DT as timestamp,",
				"          DI_CREATED_BY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceDateDim",
				"sourceSeattle, sourceLocationDim join(ZipCode == ZIP_CODE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinSeatLoc",
				"joinSeatLoc, sourceDimBreed join(PrimaryBreed == PRIMARY_BREED",
				"     && SecondaryBreed == SECONDARY_BREED",
				"     && SpeciesName == SPECIES,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinBreed",
				"joinBreed, sourceDateDim join(toDate(LicenseIssueDate) == FULL_DATE,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 aggregate(groupBy(BREED_KEY,",
				"          LOCATION_KEY,",
				"          AnimalsName,",
				"          LicenseNumber,",
				"          CREATED_DT,",
				"          CREATED_BY,",
				"          DATE_KEY),",
				"     LicenseIssue = count(LicenseIssueDate)) ~> aggregate1",
				"aggregate1 keyGenerate(output(RowNum as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(LICENSE_FACT_KEY = RowNum) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          BREED_KEY,",
				"          LOCATION_KEY,",
				"          ANIMAL_NAME = AnimalsName,",
				"          LICENSE_NUMBER = LicenseNumber,",
				"          DI_CREATED_DT = CREATED_DT,",
				"          DI_CREATED_BY = CREATED_BY,",
				"          ISSUE_DATE_KEY = DATE_KEY,",
				"          LICENSE_FACT_KEY = RowNum",
				"     )) ~> sink1"
			]
		}
	}
}